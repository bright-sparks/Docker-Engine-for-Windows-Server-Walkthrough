{"name":"Walkthrough: Docker Engine for Windows Server","tagline":"Step-by-step walk through for getting started with Docker Engine for Windows Server","body":"By now, we've all seen the posts and [tweets](https://twitter.com/windowsserver) from the IT blogosphere, heralding the arrival of Docker for Windows.  Now, to be clear: the ecosystem of Docker tools for Windows is nothing new.  Tools such as  [Boot2Docker](http://boot2docker.io/), [Kitematic](https://kitematic.com/), and the [Docker Client for Windows](https://azure.microsoft.com/blog/2015/04/16/docker-client-for-windows-is-now-available/) have been around for a while, and their collective functionality for Windows has recently been rolled up into [Docker Toolbox](https://www.docker.com/toolbox).  While these tools don’t really provide the full, native Docker experience on Windows, they do provide:\r\n\r\n* a gateway drug Docker experience for Windows/Mac users, inside a Linux VM.\r\n* the ability to manage a Linux Docker host from a Windows/Mac workstations.\r\n* a means by which software developers, operations engineers, QA, and other IT staff can work with Docker containers idempotently using Windows/Mac workstations.\r\n\r\nUntil very recently, it was not possible to use a Windows Server platform to host the Docker Engine without adding an additional layer of virtualization.  That all changed with the recent [release](https://blog.docker.com/2015/08/tp-docker-engine-windows-server-2016/) of Windows Server 2016 TP3, which provides a bona-fide Docker daemon running natively on an actual Windows Server host.  To many, this is the long awaited missing piece that clears the path to using Docker containers, tools, and workflows in production Windows environments.\r\n\r\nDocker Engine for Windows Server requires Windows Server 2016, which is currently only in the Technical Preview 3 release stage.  Like most bleeding-edge projects, Docker Engine for Windows Server is still very much in the skunkworks phase.  The current set of official documentation is sparse, fragmented, and a bit elusive.  In this walkthrough, we will outline the end-to-end steps required to quickly get up and running Docker Engine for Windows Server, from host OS install through your first docker run.\r\n\r\nGo ahead and skip to the **walkthrough** steps below, but circle back here during progress bar breaks to read these key points about Docker Engine for Windows Server:\r\n\r\n**There will be no cross platform containerization**\r\n\r\nSince Docker/libcontainer/LXC/etc are not a hypervisors, and containers are not vms, there is currently no way to present the appropriate kernel to a container from another platform.  Windows containers will require a Windows Docker host, and Linux containers will require a Linux Docker host.  The Windows Server Containers reuse the host kernel and create a sandboxed environment for the process, exactly like it does on Linux.  Unless there is an unlikely fundamental change in one or both platforms (e.g. adopting a common kernel), cross platform containerization will simply never be a thing.\r\n\r\n**There will be two types of containers on Windows**\r\n\r\n“Windows Containers” work just like Docker containers.  “Hyper-V Containers” are [something different.](http://windowsitpro.com/windows-server-2016/differences-between-windows-containers-and-hyper-v-containers-windows-server-201).\r\n\r\n\r\n**There will be two ways to manage containers in Windows**\r\n\r\nWindows Containers can be created and managed through either Docker or Powershell.  Containers created with PowerShell cannot currently be managed with Docker and visa versa\r\n\r\n**Windows Nano Server**\r\n\r\n[Nano Server ](http://www.computerweekly.com/news/2240242818/Microsofts-Nano-Server-What-to-expect-from-this-leaner-meaner-Windows-Server)is stripped-down version of Windows Server 2016, optimized for running containers.  In the Linux Docker world, think CoreOS, RHEL Atomic Host and Ubuntu Snappy.  [Apparently ](http://blogs.technet.com/b/nanoserver/archive/2015/05/12/welcome-to-the-new-nano-server-blog.aspx)the Windows Server Technical Preview 2 .iso contained a Nano Server folder in the image, as well a deployment guide.  I did not check the TP3 .iso, mostly because the current [process](http://www.happysysadm.com/2015/06/how-to-build-your-first-fantastic-nano.html) to provision a Nano instance looks like a blunderous and buggy PITA.  I remain interested in duplicating the process outlined here on Windows Nano Server, perhaps another day...\r\n  \r\n\r\n# Walkthrough: Getting Started with Docker Engine for Windows Server\r\n\r\n[Download ](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-technical-preview)the .iso for Windows Server 2016 TP3.  This requires registration for a TechNet account as well as additional registration for the evaluation download.  Only the .iso is required, you do not need to download the .wim file.\r\n\r\n\r\n\r\nBefore installing, note the following:\r\nInstall  options:\r\nBare metal: create bootable DVD/USB and complete a bare metal install.\r\nVM: create a 64-bit virtual machine in VirtualBox/HyperV/vmWare/etc.  For this walkthrough, we will be using vmWare ESXi.\r\nCloud instance: At this time, AWS EC2 does not offer an AMI for Windows Server 2016 TP3 with Windows Server Containers, however (of course) Azure does.  YMMV on other cloud platforms.\r\nAccording to Microsoft, the full (GUI) installation of Windows Server does not support containers at this point in time, and they recommend only installing Windows Server Core.  However, I have tested this install on both Full /Core, and Docker seemed to work as expected in both versions.  For this walkthrough, we will use Windows Server Core.\r\n\r\nUsing the .iso downloaded in step 1 above, proceed to install Windows Server 2016 TP3, noting the following during the installation:\r\nClick “Install now”\r\nTo install Windows Server Core, choose “Windows Server 2016 Technical Preview 3”, not “Windows Server 2016 Technical Preview 3 (Server with Desktop Experience)”, click Next.\r\n\r\n\r\nAccept the license agreement, click Next.\r\nChoose “Custom”\r\nConfigure your partitions, accept any dialogues about Windows Partitions, choose the largest partition created, and click “install”.\r\n\r\n\r\nWhen the install is complete, the system will reboot.\r\nAfter reboot, you will be prompted to change the Administrator password.  Ensure “Ok” is selected, press Enter, provide and confirm a password, press Enter twice.\r\n\r\n\r\n\r\n\r\nWindows will briefly set up the system for first use, and you will be presented with a command prompt.  Installation of Windows Server 2016 TP3 (Core) is complete.\r\n\r\n\r\n\r\nSetup Windows Server host for Containers \r\npowershell.exe\r\nEnsure console window looks like this:\r\n\r\nIf it does not (still in the powershell window) do: start-process powershell -Verb runas\r\nwget -uri http://aka.ms/setupcontainers -OutFile C:\\ContainerSetup.ps1\r\n\r\n\r\n\r\nC:\\ContainerSetup.ps1\r\n\r\nOS will reboot, install some features, and prompt for credentials\r\n\r\n\r\nProvide the credentials created earlier.  As soon as you login, a PowerShell session will spawn and the setup will continue.\r\n\r\n\r\nDuring the setup process, a very large .wim file will be downloaded.  This takes a long time (~45 minutes for me), and does not provide any console feedback to indicate the progress.  Don’t worry, your box is not locked up.\r\n\r\nAt the end of the download, the setup process will resume\r\n\r\nThe setup will indicate “Installing Docker…”, “Script complete!”, and present you with a prompt in the PowerShell console.\r\n\r\nDo docker version to confirm both the client and server components were installed successfully.\r\n\r\n\r\nDo Docker stuff.  The Technical Preview of Docker for Windows Server isn’t feature complete yet (and taking into account that the feature sets will never be exactly identical given the differences of the underlying platforms), most of the Docker commands you already know will work as expected on Windows Server.  Here’s what it thinks it can do, anyway, I’ve tested a great deal of this without any issues:\r\n\r\n\r\nLet’s kick the tires.\r\ndocker images\r\n\r\ndocker run -it --name dockerdemo windowsservercore cmd, and you are in a Windows Server Core container (windowsservercore), called dockerdemo, using an interactive terminal (-it cmd) running on a Windows Server Core Docker host!\r\n\r\n\r\n\r\nWhere to go from here?\r\nManage Windows Server Containers with Docker\r\nManage Windows Server Containers with PowerShell\r\nDocker official documentation\r\nDocker Training\r\n@botchagalupe’s kick-ass, 13 part Docker tutorial video series\r\n...and, a bunch of Windows Server 2016 TP3 stuff:\r\nrelease notes\r\nTechNet Library: What's New in Windows Server 2016 Technical Preview 3\r\nMVA Course: What's new in Windows Server 2016 Preview\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}